result of query::::: _RawGQLReturn(aggregate={}, explore={}, get={'DbObjects': [{'columns': None, 'databaseName': 'WHS_VIEWER_GMRDR_QA', 'objectName': 'PROC_IFIN_GET_FLAT_HIER', 'objectType': 'Procedure', 'primaryKey': None, 'queryDefinition': 'CREATE OR REPLACE EDITIONABLE PROCEDURE "WHS_VIEWER"."PROC_IFIN_GET_FLAT_HIER" (\nip_output_table_name   VARCHAR2,\nip_dimension_name      VARCHAR2,\nip_hierarchy_name      VARCHAR2,\nip_from_level_no       NUMBER DEFAULT NULL,\nip_to_level_no         NUMBER DEFAULT NULL\n)\nIS\nTYPE ref_cur_level IS REF CURSOR;\n\ncur_level                ref_cur_level;\n\nTYPE  v_record_level_info_type  IS\nRECORD\n(\nnode_oid             VARCHAR2(255),\ncolumn_names         VARCHAR2(4000),\nWhereClause          VARCHAR2(4000)\n);\n\nTYPE  v_array_level_names_type  IS\nTABLE OF v_record_level_info_type INDEX BY BINARY_INTEGER;\n\nv_array_level_names      v_array_level_names_type;\n\nv_array_index          NUMBER(2);\nv_run_id_no            NUMBER(4);\n\nv_min_level_no         NUMBER(4);\nv_max_level_no         NUMBER(4);\nv_cur_level_no         NUMBER(4);\n\nv_cur_level_sql        VARCHAR2(4000);\nv_flat_hier_sql        VARCHAR2(4000);\nv_Insert_sql           VARCHAR2(4000);\nv_Truncate_sql         VARCHAR2(4000);\n\nv_level_name           VARCHAR2(255);\nv_column_names         VARCHAR2(4000);\nv_WhereClause         VARCHAR2(4000);\n\nv_node_oid             VARCHAR2(255);\nv_node_id              VARCHAR2(255);\nv_node_name            VARCHAR2(255);\nv_node_code            VARCHAR2(255);\nv_node_sequence        VARCHAR2(255);\nv_node_subscribe       VARCHAR2(255);\n--Added by Pankaj for Short , Medium Description (31-aug-07)\nv_short_desc    VARCHAR2(255);\nv_med_desc    VARCHAR2(255);\n\n--Added the statements for version 1.2\nv_Column1           VARCHAR2(255);\nv_Column2           VARCHAR2(255);\nv_Column3           VARCHAR2(255);\nv_Column4           VARCHAR2(255);\nv_Column5           VARCHAR2(255);\nv_Column6           VARCHAR2(255);\nv_Column7           VARCHAR2(255);\nv_Column8           VARCHAR2(255);\nv_Column9           VARCHAR2(255);\nv_Column10       VARCHAR2(255);\n\n--Added below statements for version 1.3\n\nv_PColumn1           VARCHAR2(255);\nv_PColumn2           VARCHAR2(255);\nv_PColumn3           VARCHAR2(255);\nv_PColumn4           VARCHAR2(255);\nv_PColumn5           VARCHAR2(255);\nv_PColumn6           VARCHAR2(255);\nv_PColumn7           VARCHAR2(255);\nv_PColumn8           VARCHAR2(255);\nv_PColumn9           VARCHAR2(255);\nv_PColumn10          VARCHAR2(255);\nv_parent_subscribe   VARCHAR2(255);\nv_parent_short_desc    VARCHAR2(255);\nv_parent_med_desc    VARCHAR2(255);\n\n\n\n\n--Commented the below statement for version 1.1\n--v_node_level           VARCHAR2(255);\n\nv_parent_id            VARCHAR2(255);\nv_parent_name          VARCHAR2(255);\nv_parent_code          VARCHAR2(255);\nv_parent_sequence      VARCHAR2(255);\n\n\n\nv_parent_column_names  VARCHAR2(4000);\n\n\nv_array_elements       NUMBER(2);\nv_number_null_value    NUMBER(5);\nv_char_null_value      VARCHAR2(255);\n\nNo_Hier_data exception;\n\nBEGIN\n\nv_number_null_value := 0;\nv_char_null_value := NULL;\n\n--Truncate the node details table\nv_Truncate_sql:= \'TRUNCATE TABLE \' || ip_output_table_name;\n\nEXECUTE IMMEDIATE v_Truncate_sql;\n\n--Truncate the Log table\nEXECUTE IMMEDIATE \'TRUNCATE TABLE TBL_IFIN_FLAT_HIER_LOG\';\n\n\n\n-- Get the minimum level no. of the Hierarchy\nIF (ip_from_level_no IS NULL)\nTHEN\nBEGIN\nSELECT DECODE(MIN(level_no),NULL,-1,MIN(level_no))\nINTO   v_min_level_no\nFROM   TBL_IFIN_FLAT_HIER_CONFIG\nWHERE  UPPER(dimension_name) = UPPER(ip_dimension_name)\nAND    UPPER(hierarchy_name) = UPPER(ip_hierarchy_name);\n\n-- EXCEPTION\nIF (v_min_level_no = -1) THEN\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG values(\'There is no data present for the dimension \'  ||ip_dimension_name || \' and hierarchy \' ||  ip_hierarchy_name || \' combination\');\nraise No_Hier_data;\nEND IF;\n\nEND;\nELSE\nv_min_level_no := ip_from_level_no;\nEND IF; --(ip_from_level_no IS NULL)\n\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'v_min_level_no : \' || TO_CHAR(v_min_level_no));\n\n\n-- Get the maximum level no. of the Hierarchy\nIF (ip_to_level_no IS NULL)\nTHEN\nBEGIN\nSELECT MAX(level_no)\nINTO   v_max_level_no\nFROM   tbl_iFin_flat_hier_config\nWHERE  UPPER(dimension_name) = UPPER(ip_dimension_name)\nAND    UPPER(hierarchy_name) = UPPER(ip_hierarchy_name);\n\nEND;\nELSE\nv_max_level_no := ip_to_level_no;\nEND IF; --(ip_to_level_no IS NULL)\n\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'v_max_level_no : \' || TO_CHAR(v_max_level_no));\n\n\nv_cur_level_sql :=\n\' SELECT LEVEL_NAME,COLUMN_NAMES,FILTER_CONDITION \';\nv_cur_level_sql := v_cur_level_sql ||\n\' FROM   tbl_iFin_flat_hier_config \';\nv_cur_level_sql := v_cur_level_sql ||\n\' WHERE  UPPER(dimension_name) = UPPER( \'\'\' || ip_dimension_name || \'\'\' ) \';\nv_cur_level_sql := v_cur_level_sql ||\n\' AND    UPPER(hierarchy_name) = UPPER( \'\'\' || ip_hierarchy_name || \'\'\' ) \';\nv_cur_level_sql := v_cur_level_sql ||\n\' AND    level_no BETWEEN \' || v_min_level_no;\nv_cur_level_sql := v_cur_level_sql ||\n\' AND    \' || v_max_level_no;\nv_cur_level_sql := v_cur_level_sql ||\n\' ORDER  BY level_no ASC\';\n\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'v_cur_level_sql : \' || v_cur_level_sql);\nCOMMIT;\n\n\nv_array_index := 1;\nOPEN cur_level FOR v_cur_level_sql;\nLOOP\nFETCH cur_level INTO v_node_oid, v_column_names,v_WhereClause;\nEXIT WHEN cur_level%NOTFOUND;\nv_array_level_names(v_array_index).node_oid := v_node_oid;\nv_array_level_names(v_array_index).column_names := v_column_names;\nv_array_level_names(v_array_index).WhereClause := v_WhereClause;\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'Column Names at level \' || TO_CHAR(v_array_index) || \' : \' || v_node_oid || \',\' || v_column_names );\nv_array_index := v_array_index + 1;\nEND LOOP; -- OPEN cur_level FOR v_cur_level_sql;\n\nCLOSE cur_level;\n\nv_array_elements := v_array_index - 1;\n\nFOR v_level_index IN 1 .. v_array_elements\nLOOP\nv_node_oid := v_array_level_names(v_level_index).node_oid;\nv_column_names  := v_array_level_names(v_level_index).column_names ;\nv_WhereClause := v_array_level_names(v_level_index).WhereClause ;\n\n-- Create the Insert Statement according to the passed Intermediate node info table name\n\n--Changed the below statement for version 1.1\n--v_Insert_sql := \'INSERT INTO \' || ip_output_table_name || \' (NODE_OID,NODE_ID,NODE_CODE,NODE_NAME,NODE_SEQUENCE,NODE_SUBSCRIBE,NODE_LEVEL_CODE,PARENT_ID,PARENT_CODE,PARENT_NAME,PARENT_SEQUENCE) VALUES(:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11)\';\n--v_Insert_sql := \'INSERT INTO \' || ip_output_table_name || \' VALUES(:1, :2, :3, :4, :5, :6, :7, :8, :9, :10)\';\n--Change by Pankaj to accomodate additional 2 columns for short and med. desc\nv_Insert_sql := \'INSERT INTO \' || ip_output_table_name || \' VALUES(:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12,:13,:14, :15, :16, :17, :18, :19, :20,:21,:22,:23)\';\n\n-- Top Level\nIF v_level_index = 1\nTHEN\n\nv_flat_hier_sql :=\n\' SELECT \' ||  v_node_oid || \',\' || v_column_names ;\nv_flat_hier_sql := v_flat_hier_sql ||\n\' FROM \' || ip_dimension_name;\nv_flat_hier_sql := v_flat_hier_sql ||\n\' WHERE be_id = \' || v_node_oid || \' and sysdate between start_date and end_date and SYSDATE BETWEEN BE_START_DATE AND BE_END_DATE  and be_id <> \'\'$NOOID\'\' AND \' || v_WhereClause ;\n\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'SQL for data retrival at level \' || v_level_index  || \': \' ||  v_flat_hier_sql);\n\n\n\n\nOPEN cur_level FOR v_flat_hier_sql;\nLOOP\n--Changed the below statement for version 1.1\n-- FETCH cur_level INTO v_node_oid,v_node_id,v_node_code,v_node_name,v_node_sequence,v_node_subscribe,v_node_level;\n--Change by Pankaj added short and med desc\nFETCH cur_level INTO v_node_oid,v_node_id,v_node_code,v_node_name,v_node_sequence,v_node_subscribe,v_short_desc,v_med_desc,v_Column1,v_Column2,v_Column3,v_Column4,v_Column5,v_Column6,v_Column7,v_Column8,v_Column9,v_Column10;\nEXIT WHEN cur_level%NOTFOUND;\n\n\n\n--Changed the below statement for version 1.1\n--EXECUTE IMMEDIATE v_Insert_sql USING v_node_oid, v_node_id, v_node_code, v_node_name, v_node_sequence, v_node_subscribe, v_node_level, v_char_null_value, v_char_null_value, v_char_null_value, v_number_null_value;\nEXECUTE IMMEDIATE v_Insert_sql USING  v_node_id, v_node_code, v_node_name, v_char_null_value, v_char_null_value, v_char_null_value,v_node_sequence,v_node_oid, v_node_subscribe, v_char_null_value,v_short_desc,v_med_desc,v_level_index,v_Column1,v_Column2,v_Column3,v_Column4,v_Column5,v_Column6,v_Column7,v_Column8,v_Column9,v_Column10;\n\n\nEND LOOP; -- OPEN ref_cur_level FOR v_flat_hier_sql;\n\nELSE\n--all the other levels will have the parent\nv_parent_column_names := v_array_level_names(v_level_index-1).column_names ;\nv_flat_hier_sql :=\n\' SELECT \' ||  v_node_oid || \',\' || v_column_names || \',\' || v_parent_column_names ;\nv_flat_hier_sql := v_flat_hier_sql ||\n\' FROM \' || ip_dimension_name;\nv_flat_hier_sql := v_flat_hier_sql ||\n\' WHERE be_id = \' || v_node_oid || \' and sysdate between start_date and end_date and be_id <> \'\'$NOOID\'\'AND \' || v_WhereClause ;\n\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'SQL for data retrival at level \' || v_level_index  || \': \' ||  v_flat_hier_sql);\n\nOPEN cur_level FOR v_flat_hier_sql;\nLOOP\n--Changed the below statement for version 1.1\n-- FETCH cur_level INTO v_node_oid,v_node_id,v_node_code,v_node_name,v_node_sequence,v_node_subscribe,v_node_level,v_parent_id,v_parent_code,v_parent_name,v_parent_sequence;\n--Changed the below statement for version 1.3\nFETCH cur_level INTO v_node_oid,v_node_id,v_node_code,v_node_name,v_node_sequence,v_node_subscribe,v_short_desc,v_med_desc,v_Column1,v_Column2,v_Column3,v_Column4,v_Column5,v_Column6,v_Column7,v_Column8,v_Column9,v_Column10,v_parent_id,v_parent_code,v_parent_name,v_parent_sequence,v_parent_subscribe,v_parent_short_desc,v_parent_med_desc,v_PColumn1,v_PColumn2,v_PColumn3,v_PColumn4,v_PColumn5,v_PColumn6,v_PColumn7,v_PColumn8,v_PColumn9,v_PColumn10;\nEXIT WHEN cur_level%NOTFOUND;\n\n\n--Changed the below statement for version 1.1\n--EXECUTE IMMEDIATE v_Insert_sql USING v_node_oid, v_node_id, v_node_code, v_node_name, v_node_sequence, v_node_subscribe, v_node_level, v_parent_id, v_parent_code, v_parent_name,v_parent_sequence;\nEXECUTE IMMEDIATE v_Insert_sql USING  v_node_id, v_node_code, v_node_name, v_parent_id, v_parent_code, v_parent_name,v_node_sequence,v_node_oid, v_node_subscribe,v_parent_sequence,v_short_desc,v_med_desc,v_level_index,v_Column1,v_Column2,v_Column3,v_Column4,v_Column5,v_Column6,v_Column7,v_Column8,v_Column9,v_Column10;\n\n--INSERT INTO TBL_IFIN_FLAT_HIER_LOG\n--VALUES(\'INSERT INTO T_IFIN_BU_CC_NODE_DTS VALUES(\'\'\' || v_node_id || \'\'\',\'\'\' || v_node_code || \'\'\',\'\'\' ||  v_node_name || \'\'\',\'\'\' ||  v_parent_id || \'\'\',\'\'\' ||  v_parent_code || \'\'\',\'\'\' ||  v_parent_name || \'\'\',\'\'\' || v_node_sequence || \'\'\',\'\'\' || v_node_oid || \'\'\',\'\'\' || v_node_subscribe || \'\'\',\'\'\' || v_parent_sequence || \'\'\',\'\'\' || v_short_desc || \'\'\',\'\'\' || v_med_desc || \'\'\',\'\'\' || v_level_index || \'\'\',\'\'\' || v_Column1 || \'\'\',\'\'\' || v_Column2 || \'\'\',\'\'\' || v_Column3 || \'\'\',\'\'\' || v_Column4 || \'\'\',\'\'\' || v_Column5 || \'\'\',\'\'\' || v_Column6 || \'\'\',\'\'\' || v_Column7 || \'\'\',\'\'\' || v_Column8 || \'\'\',\'\'\' || v_Column9 || \'\'\',\'\'\' || v_Column10 || \'\'\');\');\n\nEND LOOP; -- OPEN ref_cur_level FOR v_flat_hier_sql;\n\n\n-- CLOSE cur_level;\nend if;\n\n\nEND LOOP; -- WHILE (v_cur_level_no <= v_max_level_no)\n\nexception\nwhen No_Hier_data  then\nnull;  -- error is logged no action to take\n\nEND PROC_IFIN_GET_FLAT_HIER;', 'schemaName': 'WHS_VIEWER'}, {'columns': None, 'databaseName': 'WHS_VIEWER_GMRDR_QA', 'objectName': 'PROC_IFIN_GET_FLAT_HIER', 'objectType': 'Procedure', 'primaryKey': None, 'queryDefinition': 'CREATE OR REPLACE EDITIONABLE PROCEDURE "WHS_VIEWER"."PROC_IFIN_GET_FLAT_HIER" (\nip_output_table_name   VARCHAR2,\nip_dimension_name      VARCHAR2,\nip_hierarchy_name      VARCHAR2,\nip_from_level_no       NUMBER DEFAULT NULL,\nip_to_level_no         NUMBER DEFAULT NULL\n)\nIS\nTYPE ref_cur_level IS REF CURSOR;\n\ncur_level                ref_cur_level;\n\nTYPE  v_record_level_info_type  IS\nRECORD\n(\nnode_oid             VARCHAR2(255),\ncolumn_names         VARCHAR2(4000),\nWhereClause          VARCHAR2(4000)\n);\n\nTYPE  v_array_level_names_type  IS\nTABLE OF v_record_level_info_type INDEX BY BINARY_INTEGER;\n\nv_array_level_names      v_array_level_names_type;\n\nv_array_index          NUMBER(2);\nv_run_id_no            NUMBER(4);\n\nv_min_level_no         NUMBER(4);\nv_max_level_no         NUMBER(4);\nv_cur_level_no         NUMBER(4);\n\nv_cur_level_sql        VARCHAR2(4000);\nv_flat_hier_sql        VARCHAR2(4000);\nv_Insert_sql           VARCHAR2(4000);\nv_Truncate_sql         VARCHAR2(4000);\n\nv_level_name           VARCHAR2(255);\nv_column_names         VARCHAR2(4000);\nv_WhereClause         VARCHAR2(4000);\n\nv_node_oid             VARCHAR2(255);\nv_node_id              VARCHAR2(255);\nv_node_name            VARCHAR2(255);\nv_node_code            VARCHAR2(255);\nv_node_sequence        VARCHAR2(255);\nv_node_subscribe       VARCHAR2(255);\n--Added by Pankaj for Short , Medium Description (31-aug-07)\nv_short_desc    VARCHAR2(255);\nv_med_desc    VARCHAR2(255);\n\n--Added the statements for version 1.2\nv_Column1           VARCHAR2(255);\nv_Column2           VARCHAR2(255);\nv_Column3           VARCHAR2(255);\nv_Column4           VARCHAR2(255);\nv_Column5           VARCHAR2(255);\nv_Column6           VARCHAR2(255);\nv_Column7           VARCHAR2(255);\nv_Column8           VARCHAR2(255);\nv_Column9           VARCHAR2(255);\nv_Column10       VARCHAR2(255);\n\n--Added below statements for version 1.3\n\nv_PColumn1           VARCHAR2(255);\nv_PColumn2           VARCHAR2(255);\nv_PColumn3           VARCHAR2(255);\nv_PColumn4           VARCHAR2(255);\nv_PColumn5           VARCHAR2(255);\nv_PColumn6           VARCHAR2(255);\nv_PColumn7           VARCHAR2(255);\nv_PColumn8           VARCHAR2(255);\nv_PColumn9           VARCHAR2(255);\nv_PColumn10          VARCHAR2(255);\nv_parent_subscribe   VARCHAR2(255);\nv_parent_short_desc    VARCHAR2(255);\nv_parent_med_desc    VARCHAR2(255);\n\n\n\n\n--Commented the below statement for version 1.1\n--v_node_level           VARCHAR2(255);\n\nv_parent_id            VARCHAR2(255);\nv_parent_name          VARCHAR2(255);\nv_parent_code          VARCHAR2(255);\nv_parent_sequence      VARCHAR2(255);\n\n\n\nv_parent_column_names  VARCHAR2(4000);\n\n\nv_array_elements       NUMBER(2);\nv_number_null_value    NUMBER(5);\nv_char_null_value      VARCHAR2(255);\n\nNo_Hier_data exception;\n\nBEGIN\n\nv_number_null_value := 0;\nv_char_null_value := NULL;\n\n--Truncate the node details table\nv_Truncate_sql:= \'TRUNCATE TABLE \' || ip_output_table_name;\n\nEXECUTE IMMEDIATE v_Truncate_sql;\n\n--Truncate the Log table\nEXECUTE IMMEDIATE \'TRUNCATE TABLE TBL_IFIN_FLAT_HIER_LOG\';\n\n\n\n-- Get the minimum level no. of the Hierarchy\nIF (ip_from_level_no IS NULL)\nTHEN\nBEGIN\nSELECT DECODE(MIN(level_no),NULL,-1,MIN(level_no))\nINTO   v_min_level_no\nFROM   TBL_IFIN_FLAT_HIER_CONFIG\nWHERE  UPPER(dimension_name) = UPPER(ip_dimension_name)\nAND    UPPER(hierarchy_name) = UPPER(ip_hierarchy_name);\n\n-- EXCEPTION\nIF (v_min_level_no = -1) THEN\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG values(\'There is no data present for the dimension \'  ||ip_dimension_name || \' and hierarchy \' ||  ip_hierarchy_name || \' combination\');\nraise No_Hier_data;\nEND IF;\n\nEND;\nELSE\nv_min_level_no := ip_from_level_no;\nEND IF; --(ip_from_level_no IS NULL)\n\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'v_min_level_no : \' || TO_CHAR(v_min_level_no));\n\n\n-- Get the maximum level no. of the Hierarchy\nIF (ip_to_level_no IS NULL)\nTHEN\nBEGIN\nSELECT MAX(level_no)\nINTO   v_max_level_no\nFROM   tbl_iFin_flat_hier_config\nWHERE  UPPER(dimension_name) = UPPER(ip_dimension_name)\nAND    UPPER(hierarchy_name) = UPPER(ip_hierarchy_name);\n\nEND;\nELSE\nv_max_level_no := ip_to_level_no;\nEND IF; --(ip_to_level_no IS NULL)\n\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'v_max_level_no : \' || TO_CHAR(v_max_level_no));\n\n\nv_cur_level_sql :=\n\' SELECT LEVEL_NAME,COLUMN_NAMES,FILTER_CONDITION \';\nv_cur_level_sql := v_cur_level_sql ||\n\' FROM   tbl_iFin_flat_hier_config \';\nv_cur_level_sql := v_cur_level_sql ||\n\' WHERE  UPPER(dimension_name) = UPPER( \'\'\' || ip_dimension_name || \'\'\' ) \';\nv_cur_level_sql := v_cur_level_sql ||\n\' AND    UPPER(hierarchy_name) = UPPER( \'\'\' || ip_hierarchy_name || \'\'\' ) \';\nv_cur_level_sql := v_cur_level_sql ||\n\' AND    level_no BETWEEN \' || v_min_level_no;\nv_cur_level_sql := v_cur_level_sql ||\n\' AND    \' || v_max_level_no;\nv_cur_level_sql := v_cur_level_sql ||\n\' ORDER  BY level_no ASC\';\n\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'v_cur_level_sql : \' || v_cur_level_sql);\nCOMMIT;\n\n\nv_array_index := 1;\nOPEN cur_level FOR v_cur_level_sql;\nLOOP\nFETCH cur_level INTO v_node_oid, v_column_names,v_WhereClause;\nEXIT WHEN cur_level%NOTFOUND;\nv_array_level_names(v_array_index).node_oid := v_node_oid;\nv_array_level_names(v_array_index).column_names := v_column_names;\nv_array_level_names(v_array_index).WhereClause := v_WhereClause;\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'Column Names at level \' || TO_CHAR(v_array_index) || \' : \' || v_node_oid || \',\' || v_column_names );\nv_array_index := v_array_index + 1;\nEND LOOP; -- OPEN cur_level FOR v_cur_level_sql;\n\nCLOSE cur_level;\n\nv_array_elements := v_array_index - 1;\n\nFOR v_level_index IN 1 .. v_array_elements\nLOOP\nv_node_oid := v_array_level_names(v_level_index).node_oid;\nv_column_names  := v_array_level_names(v_level_index).column_names ;\nv_WhereClause := v_array_level_names(v_level_index).WhereClause ;\n\n-- Create the Insert Statement according to the passed Intermediate node info table name\n\n--Changed the below statement for version 1.1\n--v_Insert_sql := \'INSERT INTO \' || ip_output_table_name || \' (NODE_OID,NODE_ID,NODE_CODE,NODE_NAME,NODE_SEQUENCE,NODE_SUBSCRIBE,NODE_LEVEL_CODE,PARENT_ID,PARENT_CODE,PARENT_NAME,PARENT_SEQUENCE) VALUES(:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11)\';\n--v_Insert_sql := \'INSERT INTO \' || ip_output_table_name || \' VALUES(:1, :2, :3, :4, :5, :6, :7, :8, :9, :10)\';\n--Change by Pankaj to accomodate additional 2 columns for short and med. desc\nv_Insert_sql := \'INSERT INTO \' || ip_output_table_name || \' VALUES(:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12,:13,:14, :15, :16, :17, :18, :19, :20,:21,:22,:23)\';\n\n-- Top Level\nIF v_level_index = 1\nTHEN\n\nv_flat_hier_sql :=\n\' SELECT \' ||  v_node_oid || \',\' || v_column_names ;\nv_flat_hier_sql := v_flat_hier_sql ||\n\' FROM \' || ip_dimension_name;\nv_flat_hier_sql := v_flat_hier_sql ||\n\' WHERE be_id = \' || v_node_oid || \' and sysdate between start_date and end_date and SYSDATE BETWEEN BE_START_DATE AND BE_END_DATE  and be_id <> \'\'$NOOID\'\' AND \' || v_WhereClause ;\n\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'SQL for data retrival at level \' || v_level_index  || \': \' ||  v_flat_hier_sql);\n\n\n\n\nOPEN cur_level FOR v_flat_hier_sql;\nLOOP\n--Changed the below statement for version 1.1\n-- FETCH cur_level INTO v_node_oid,v_node_id,v_node_code,v_node_name,v_node_sequence,v_node_subscribe,v_node_level;\n--Change by Pankaj added short and med desc\nFETCH cur_level INTO v_node_oid,v_node_id,v_node_code,v_node_name,v_node_sequence,v_node_subscribe,v_short_desc,v_med_desc,v_Column1,v_Column2,v_Column3,v_Column4,v_Column5,v_Column6,v_Column7,v_Column8,v_Column9,v_Column10;\nEXIT WHEN cur_level%NOTFOUND;\n\n\n\n--Changed the below statement for version 1.1\n--EXECUTE IMMEDIATE v_Insert_sql USING v_node_oid, v_node_id, v_node_code, v_node_name, v_node_sequence, v_node_subscribe, v_node_level, v_char_null_value, v_char_null_value, v_char_null_value, v_number_null_value;\nEXECUTE IMMEDIATE v_Insert_sql USING  v_node_id, v_node_code, v_node_name, v_char_null_value, v_char_null_value, v_char_null_value,v_node_sequence,v_node_oid, v_node_subscribe, v_char_null_value,v_short_desc,v_med_desc,v_level_index,v_Column1,v_Column2,v_Column3,v_Column4,v_Column5,v_Column6,v_Column7,v_Column8,v_Column9,v_Column10;\n\n\nEND LOOP; -- OPEN ref_cur_level FOR v_flat_hier_sql;\n\nELSE\n--all the other levels will have the parent\nv_parent_column_names := v_array_level_names(v_level_index-1).column_names ;\nv_flat_hier_sql :=\n\' SELECT \' ||  v_node_oid || \',\' || v_column_names || \',\' || v_parent_column_names ;\nv_flat_hier_sql := v_flat_hier_sql ||\n\' FROM \' || ip_dimension_name;\nv_flat_hier_sql := v_flat_hier_sql ||\n\' WHERE be_id = \' || v_node_oid || \' and sysdate between start_date and end_date and be_id <> \'\'$NOOID\'\'AND \' || v_WhereClause ;\n\n-- Logging\nINSERT INTO TBL_IFIN_FLAT_HIER_LOG\nVALUES(\'SQL for data retrival at level \' || v_level_index  || \': \' ||  v_flat_hier_sql);\n\nOPEN cur_level FOR v_flat_hier_sql;\nLOOP\n--Changed the below statement for version 1.1\n-- FETCH cur_level INTO v_node_oid,v_node_id,v_node_code,v_node_name,v_node_sequence,v_node_subscribe,v_node_level,v_parent_id,v_parent_code,v_parent_name,v_parent_sequence;\n--Changed the below statement for version 1.3\nFETCH cur_level INTO v_node_oid,v_node_id,v_node_code,v_node_name,v_node_sequence,v_node_subscribe,v_short_desc,v_med_desc,v_Column1,v_Column2,v_Column3,v_Column4,v_Column5,v_Column6,v_Column7,v_Column8,v_Column9,v_Column10,v_parent_id,v_parent_code,v_parent_name,v_parent_sequence,v_parent_subscribe,v_parent_short_desc,v_parent_med_desc,v_PColumn1,v_PColumn2,v_PColumn3,v_PColumn4,v_PColumn5,v_PColumn6,v_PColumn7,v_PColumn8,v_PColumn9,v_PColumn10;\nEXIT WHEN cur_level%NOTFOUND;\n\n\n--Changed the below statement for version 1.1\n--EXECUTE IMMEDIATE v_Insert_sql USING v_node_oid, v_node_id, v_node_code, v_node_name, v_node_sequence, v_node_subscribe, v_node_level, v_parent_id, v_parent_code, v_parent_name,v_parent_sequence;\nEXECUTE IMMEDIATE v_Insert_sql USING  v_node_id, v_node_code, v_node_name, v_parent_id, v_parent_code, v_parent_name,v_node_sequence,v_node_oid, v_node_subscribe,v_parent_sequence,v_short_desc,v_med_desc,v_level_index,v_Column1,v_Column2,v_Column3,v_Column4,v_Column5,v_Column6,v_Column7,v_Column8,v_Column9,v_Column10;\n\n--INSERT INTO TBL_IFIN_FLAT_HIER_LOG\n--VALUES(\'INSERT INTO T_IFIN_BU_CC_NODE_DTS VALUES(\'\'\' || v_node_id || \'\'\',\'\'\' || v_node_code || \'\'\',\'\'\' ||  v_node_name || \'\'\',\'\'\' ||  v_parent_id || \'\'\',\'\'\' ||  v_parent_code || \'\'\',\'\'\' ||  v_parent_name || \'\'\',\'\'\' || v_node_sequence || \'\'\',\'\'\' || v_node_oid || \'\'\',\'\'\' || v_node_subscribe || \'\'\',\'\'\' || v_parent_sequence || \'\'\',\'\'\' || v_short_desc || \'\'\',\'\'\' || v_med_desc || \'\'\',\'\'\' || v_level_index || \'\'\',\'\'\' || v_Column1 || \'\'\',\'\'\' || v_Column2 || \'\'\',\'\'\' || v_Column3 || \'\'\',\'\'\' || v_Column4 || \'\'\',\'\'\' || v_Column5 || \'\'\',\'\'\' || v_Column6 || \'\'\',\'\'\' || v_Column7 || \'\'\',\'\'\' || v_Column8 || \'\'\',\'\'\' || v_Column9 || \'\'\',\'\'\' || v_Column10 || \'\'\');\');\n\nEND LOOP; -- OPEN ref_cur_level FOR v_flat_hier_sql;\n\n\n-- CLOSE cur_level;\nend if;\n\n\nEND LOOP; -- WHILE (v_cur_level_no <= v_max_level_no)\n\nexception\nwhen No_Hier_data  then\nnull;  -- error is logged no action to take\n\nEND PROC_IFIN_GET_FLAT_HIER;', 'schemaName': 'WHS_VIEWER'}]}, errors=None)
